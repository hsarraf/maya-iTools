global string $HiRig_lastIdPath  = "c:/hirig/lastId.hi";global string $HiRig_baseItemsPath = "c:/hirig/baseItems.hi";global string $HiRig_idItemsPath = "c:/hirig/idItems.hi";global string $iconImagesDir = "c:/hirig/images/";    // The paths of this dir is set into <Icons Box> frame//  UI controls//  Naming Boxglobal string $HiRig_hiRigWin;global string $HiRig_sideCollection;global string $HiRig_left;global string $HiRig_right;global string $HiRig_middle;global string $HiRig_base;global string $HiRig_baseMenuItemControl;global string $HiRig_idMenuItemControl;global string $HiRig_id;global string $HiRig_tip;//  Icons Boxglobal string $HiRig_useNamingBoxSettings;//-----------------------------------------------------------------------------------//  Lunch main window <$HiRig_hiRigWin>if (`window -ex $HiRig_hiRigWin`)	deleteUI $HiRig_hiRigWin;$HiRig_hiRigWin = `window -t "HiRig"`;//  Main layout <HiRig>columnLayout -adj 1;//  Main layout <Naming Box>frameLayout -l "Naming Box" -cl 0 -cll 1;  rowLayout -nc 4 -cw 1 70 -cw 2 150 -cw 3 150 -cw 4 50;//  Side part   frameLayout -l "Side" -cl 1 -cll 0 -bs "etchedIn";    columnLayout -adj 1;	$HiRig_sideCollection = `radioCollection`;	$HiRig_left = `radioButton -l "Left" -sl -align "left" HiRig_left`;	$HiRig_right = `radioButton -l "Right" -align "left" HiRig_right`;	$HiRig_middle = `radioButton -l "Middle" -align "left" HiRig_middle`;    setParent..;   setParent..;//  Base part   frameLayout -l "Base" -cl 1 -cll 0 -bs "etchedIn";    columnLayout -adj 1;	$HiRig_base = `textField -w 140`;	$HiRig_baseMenuItemControl = `popupMenu -button 3`;// -cc HiRih_setBaseItemFunc`;//  menueItems are added within a file <$HiRig_baseItemsPath>	source "c:/hirig/baseItems.hi";	button -l "Add" -c HiRig_addBaseItemFunc;	button -l "Rem" -c HiRig_remBaseItemFunc;    setParent..;   setParent..;//  ID part   frameLayout -l "ID" -cl 1 -cll 0 -bs "etchedIn";    columnLayout -adj 1;	string $lastId = HiRig_getLastIdFunc();	$HiRig_id = `textField -tx $lastId -cc HiRig_setLastChangesFunc -w 140`;	$HiRig_idMenuItemControl = `popupMenu -button 3`;// -cc HiRih_setBaseItemFunc`;//  menueItems are added within a file <$HiRig_idItemsPath>	source "c:/hirig/idItems.hi";	button -l "Add" -c HiRig_addIdItemFunc;	button -l "Rem" -c HiRig_remIdItemFunc;    setParent..;   setParent..;   columnLayout -adj 1;	button -l "Name It" -w 55 -h 55 -c "HiRig_nameItFunc(1, 1)";	text -l "";	$HiRig_tip = `checkBox -l "Tip" -v 1`;   setParent..;  setParent..;setParent..;//  Main layout <Icons Box>frameLayout -l "Icons Box" -cl 0 -cll 1; columnLayout -adj 1;  rowLayout -nc 5;  	symbolButton -i ($iconImagesDir + "circle.bmp") -c "HiRig_drawIconFunc (\"circle\")";  	symbolButton -i ($iconImagesDir + "square.bmp") -c "HiRig_drawIconFunc (\"square\")";  	symbolButton -i ($iconImagesDir + "box.bmp") -c "HiRig_drawIconFunc (\"box\")";  	symbolButton -i ($iconImagesDir + "alams.bmp") -c "HiRig_drawIconFunc (\"almas\")";  	symbolButton -i ($iconImagesDir + "flesh.bmp") -c "HiRig_drawIconFunc (\"flesh\")";  setParent..;//  $HiRig_useNamingBoxSettings = `checkBox -l "Use NB Settings" -align "left"`;	button -l "Name It Single" -c "HiRig_nameItFunc(0, 0)";	button -l "Name It Hierarchical" -c "HiRig_nameItFunc(0, 1)"; setParent..;setParent..;setParent..;//  Show window <$HiRig_hiRigWin>showWindow $HiRig_hiRigWin;//-----------------------------------------------------------------------------------global proc HiRig_nameItFunc (int $hirMode, int $padMode) {		// Begin func <HiRig_nameItFunc>//  Lunch global vars  global string $HiRig_base;  global string $HiRig_id;  global string $HiRig_sideCollection;  global string $HiRig_tip;//  Get the set side info entered by user and set $side  string $side = `radioCollection -q -sl $HiRig_sideCollection`;//  Determine wheather which side has to be written  switch ($side) {    case "HiRig_left":	$side = "L";    break;    case "HiRig_right":	$side = "R";    break;    case "HiRig_middle":	$side = "M";    break;  }//  Get the set base name and id entered by user and set $base and $id  string $base = `textField -q -tx $HiRig_base`;  string $id = `textField -q -tx $HiRig_id`;//  Select all hierarchy and iterate on its child to set the //	name based on info gatherd <$side, $base, $id>  if ($hirMode)    select -r -hi;  string $list[] = `ls -sl`;  string $it;  int $j = 0;//  Check if caller needs padding or not//  No padding is used when naming the icons singlely  if ($padMode) {	  for ($j = 0 ; $j < `size $list` ; $j++) {		if ($hirMode)		  select -r -hi;		$list = `ls -sl`;       	int $pad = 0;		for ($it in $list) {		  string $name = $side + "_" + $base + $pad + "_" + $id;		  if (catch(`rename $it $name`));		    $pad++;		}	  }  }  else {	  for ($j = 0 ; $j < `size $list` ; $j++) {		if ($hirMode)		  select -r -hi;		$list = `ls -sl`;       	int $pad = 0;		for ($it in $list) {		  string $name =  $side + "_" + $base + "_" + $id;		  if (catch(`rename $it $name`));		  $pad++;		}	  }  }//  Determine if user wants to have tips as the last child  if ($padMode)  	if (`checkBox -q -v $HiRig_tip`) {		$name = $side + "_" + $base + "Tip" + "_" + $id;		rename $it $name;	}//  Deselect all to clarity  select -cl;  print ("Naming done");}		// End func <HiRig_nameItFunc>//-----------------------------------------------------------------------------------global proc string HiRig_getLastIdFunc() {		// Begin func <HiRig_getLastIdFunc>//  Lunch global vars  global string $HiRig_lastIdPath ;//  Open file <$HiRig_lastIdPath > to read the last changes on Id  int $fileId = `fopen $HiRig_lastIdPath  "r"`;  string $nextLine;  while (!`feof $fileId`) {	$nextLine = `fgetline $fileId`;	string $lineArr[];	tokenizeList $nextLine $lineArr;  }//  Read the last id  string $lastChange = $nextLine;//  Close file <$HiRig_lastIdPath >  fclose $fileId;  print $lastChange;  return $lastChange;}		// End func <HiRig_getLastIdFunc>//----------------------------------------------------------------------------------- global proc HiRig_setLastChangesFunc () {		// Begin func <HiRig_setLastChangesFunc>//  Lunch global vars  global string $HiRig_lastIdPath ;  global string $HiRig_id;//  Open file <$HiRig_lastIdPath > to set the last changes on Id  int $fileId = `fopen $HiRig_lastIdPath  "w"`;//  Write <LastId> into <lastChanges.hi> file  string $lastId = `textField -q -tx $HiRig_id`;  fprint $fileId $lastId;  fclose $fileId;}		// End func <HiRig_setLastChangesFunc>//-----------------------------------------------------------------------------------global proc int HiRig_addBaseItemFunc() {		// Begin func <HiRig_addBaseItemFunc>//  Lunch global vars  global string $HiRig_baseItemsPath;  global string $HiRig_base;//  Get the given base name  string $baseItem = `textField -q -tx $HiRig_base`;//  Make the correct menuItem string to add to the file  string $line2Write = ("menuItem -l \"" + $baseItem + "\" -c " + "\"textField -e -tx " + $baseItem + " $HiRig_base\";");//  Open the file <$HiRig_baseItemsPath> in read mode  int $fileId = `fopen $HiRig_baseItemsPath "r"`;//  Determine if exists any menueItem in the file <$line2Read> with the //	same name as which user wants to add <$line2Write>  while (!`feof $fileId`) {	string $line2Read = `fgetline $fileId`;//  If so, close the file, get a warning and return 0 to get out of the func	if (HiRig_tokenStrFunc($line2Read, ";") == $line2Write) {		fclose $fileId;		HiRig_warningFunc ("existed", $baseItem);		return 0;	}  }//  If so not, close the file  fclose $fileId;//  Open the same file in append mode to write the entered base as menuItem <$HiRig_baseItemsPath>  $fileId = `fopen $HiRig_baseItemsPath "a"`;  fprint $fileId "\n";  fprint $fileId $line2Write;  fclose $fileId;//  Get info  HiRig_infoFunc ("added", $baseItem);  return 1;}		// End func <HiRig_addBaseItemFunc>  //-----------------------------------------------------------------------------------global proc int HiRig_remBaseItemFunc() {			// Begin func <HiRig_remBaseItemFunc>//  Lunch global vars  global string $HiRig_baseItemsPath;  global string $HiRig_base;//  Get the given base name  string $baseItem = `textField -q -tx $HiRig_base`;//  Make the correct menuItem string to determine if it exists in the file  string $line2Delete = ("menuItem -l \"" + $baseItem + "\" -c " + "\"textField -e -tx " + $baseItem + " $HiRig_base\";");//  Open file in read mode <$HiRig_baseItemsPath>  int $fileId = `fopen $HiRig_baseItemsPath "r"`;//  Gather all lines into the file into a var array //    except that corresponds with <$line2Delete>  int $i = 0;  string $linesArr[];  while (!`feof $fileId`) {	string $line2Read = `fgetline $fileId`;	if (HiRig_tokenStrFunc($line2Read, ";") != $line2Delete)		$linesArr[$i] = $line2Read;		$i++;  }  fclose $fileId;//  Open the same file in write mode to write all gathered data again  $fileId = `fopen $HiRig_baseItemsPath "w"`;  int $j;  for ($j = 0 ; $j < $i ; $j++)	fprint $fileId $linesArr[$j];//  Close file  fclose $fileId;//  Get info  HiRig_infoFunc ("removed", $baseItem);  return 1;}		// End func <HiRig_remBaseItemFunc>//-----------------------------------------------------------------------------------global proc int HiRig_addIdItemFunc() {  global string $HiRig_idItemsPath;  global string $HiRig_id;  string $idItem = `textField -q -tx $HiRig_id`;  string $line2Write = ("menuItem -l \"" + $idItem + "\" -c " + "\"textField -e -tx " + $idItem + " $HiRig_id\";");  int $fileId = `fopen $HiRig_idItemsPath "r"`;  while (!`feof $fileId`) {	string $line2Read = `fgetline $fileId`;//	print ($line2Read);	if (HiRig_tokenStrFunc($line2Read, ";") == $line2Write) {		fclose $fileId;		HiRig_warningFunc ("existed", $idItem);		return 0;	}  }  fclose $fileId;  $fileId = `fopen $HiRig_idItemsPath "a"`;  fprint $fileId "\n";  fprint $fileId $line2Write;  fclose $fileId;  HiRig_infoFunc ("added", $idItem);  return 1;}  //-----------------------------------------------------------------------------------global proc int HiRig_remIdItemFunc() {  global string $HiRig_idItemsPath;  global string $HiRig_id;  string $idItem = `textField -q -tx $HiRig_id`;  string $line2Delete = ("menuItem -l \"" + $idItem + "\" -c " + "\"textField -e -tx " + $idItem + " $HiRig_id\";");  int $fileId = `fopen $HiRig_idItemsPath "r"`;  int $i = 0;  string $linesArr[];  while (!`feof $fileId`) {	string $line2Read = `fgetline $fileId`;	if (HiRig_tokenStrFunc($line2Read, ";") != $line2Delete)		$linesArr[$i] = $line2Read;		$i++;  }  fclose $fileId;  $fileId = `fopen $HiRig_idItemsPath "w"`;  int $j;  for ($j = 0 ; $j < $i ; $j++) {	fprint $fileId $linesArr[$j];//	fprint $fileId "\n";  }  fclose $fileId;  HiRig_infoFunc ("removed", $idItem);  return 1;}//-----------------------------------------------------------------------------------global proc string HiRig_tokenStrFunc(string $str, string $sep) {  string $strArr[];  tokenize $str $sep $strArr;  string $strRes = ($strArr[0] + ";");  return $strRes;}//-----------------------------------------------------------------------------------global proc HiRig_warningFunc (string $type, string $item) {  switch ($type) {	case "existed":		warning ($item + " existed before"); 	break;  }}//-----------------------------------------------------------------------------------global proc HiRig_infoFunc (string $type, string $item) {  switch ($type) {	case "added":		print ($item + " is now added"); 	break;	case "removed":		print ($item + " is now removed"); 	break;  }};//-----------------------------------------------------------------------------------global proc HiRig_drawIconFunc (string $type) {  select -hi;  string $itemsList[] = `ls -sl`;  string $item = $itemsList[0];  switch ($type) {    case "circle":	circle -ch on -o on -nr 0 1 0 -r .5;    break;    case "square":	curve -d 1 -p -0.792507 0 -6.92832e-008 -p -3.46416e-008 0 0.792507					-p 0.792507 0 0 -p 1.03925e-007 0 -0.792507 -p -0.792507 0 -6.92832e-008 -k 0 -k 1 -k 2 -k 3 -k 4;    break;    case "box":	curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5					-p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p -0.5 0.5 -0.5					-p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 0.5 -0.5					-p 0.5 0.5 -0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15;    break;    case "almas":	curve -d 1 -p 0 0.792507 0 -p -3.46416e-008 0 0.792507 -p 0 -0.792507 0					-p 1.03925e-007 0 -0.792507 -p 0 0.792507 0 -p 0.792507 0 0 -p 0 -0.792507 0 -p -0.792507 0 -6.92832e-008					-p 0 0.792507 0 -p -3.46416e-008 0 0.792507 -p 0.792507 0 0 -p 1.03925e-007 0 -0.792507 -p -0.792507 0 -6.92832e-008					-p -3.46416e-008 0 0.792507 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13;    break;    case "flesh":	curve -d 1 -p -0.25 0 -0.75 -p 0.25 0 -0.75 -p 0.25 0 0.25					-p 0.5 0 0.25 -p 0 0 0.75 -p -0.5 0 0.25 -p -0.25 0 0.25 -p -0.25 0 -0.75 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7;    break;  }  string $iconsList[] = `ls -sl`;  string $icon = $iconsList[0];  if (`size $itemsList` > 0) {	  	  vector $itemPos = `xform -q -t -ws ($item)`;	  setAttr ($icon + ".tx") ($itemPos.x);	  setAttr ($icon + ".ty") ($itemPos.y);	  setAttr ($icon + ".tz") ($itemPos.z);	  if (`size $itemsList` > 1) {		string $childItem = $itemsList[1];		aimConstraint -offset 0 0 0 -weight 1 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "vector" -worldUpVector 0 1 0 -n "tempAim" $childItem $icon;		delete "tempAim";	  }	    }    select -r $icon;  HiRig_nameItFunc(0, 0);}//-----------------------------------------------------------------------------------